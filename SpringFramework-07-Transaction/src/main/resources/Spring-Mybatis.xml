<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
">


    <!-- 引入数据库配置文件  配置数据库dataSource -->
    <context:property-placeholder location="classpath:mysql.properties"/>


    <beans>

        <!--data source-->
        <!--配置数据库连接池 使用alibaba.Druid.pool.DruidDataSource-->
        <bean id="dateSource" class="com.alibaba.druid.pool.DruidDataSource">
            <property name="driverClassName"
                      value="${mysql.driverClassName}"/>
            <property name="url"
                      value="${mysql.url}"/>
            <property name="username"
                      value="${mysql.username}"/>
            <property name="password"
                      value="${mysql.password}"/>
        </bean>

        <!--sqlSessionFactory-->
        <!--利用Spring中SqlSessionFactoryBean生成sqlSessionFactory-->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <!--配置数据源-->
            <property name="dataSource" ref="dateSource"/>
            <!--引入外部mybatis-config.xml-->
            <property name="configLocation" value="mybatis-config.xml"/>
            <!--起别名-->
            <property name="typeAliasesPackage" value="pojo"/>
            <!--映射器 mappers-->
            <property name="mapperLocations" value="mapper/*Mapper.xml"/>
        </bean>

        <!--配置扫描Dao接口，动态实现Dao接口Mapper注入到Spring容器中-->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
            <property name="basePackage" value="mapper"/>
        </bean>

        <!--
        配置声明式事务
        -->

        <!--开启 Spring 的事务处理功能     创建事务管理器    Mybatis,JDBC使用DataSourceTransactionManager  -->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <!--注入数据源-->
            <property name="dataSource" ref="dateSource"/>
        </bean>

        <!--开启事务注解-->
        <tx:annotation-driven transaction-manager="transactionManager"/>


        <!--xml配置-->

        <!--给哪些方法配置事务-->
        <!--advice 配置事务通知-->
        <tx:advice id="txActive" transaction-manager="transactionManager">
            <tx:attributes>
                <!--配置事务的传播特性：new propagation=-->
                <tx:method name="*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" read-only="false"/>
            </tx:attributes>
        </tx:advice>

        <!--配置事务切入-->
        <aop:config>
            <!--切入点-->
            <aop:pointcut id="txPointCut" expression="execution(* service.*.*(..))"/>
            <!--事务切入-->
            <aop:advisor advice-ref="txActive" pointcut-ref="txPointCut"/>
        </aop:config>

    </beans>


</beans>